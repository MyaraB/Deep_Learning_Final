# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aWsNxYJrsHWHsPOEIdzARdGeix07CXkU
"""

import numpy as np
import pandas as pd
from pathlib import Path
import os.path
from tensorflow import keras
from tensorflow.keras import layers
from sklearn.model_selection import train_test_split
import tensorflow as tf
from sklearn.metrics import r2_score
import os.path
import io
from google.colab import files
import csv

condensed = Path('/content/drive/MyDrive/למידה עמוקה מטלת גמר/Diamonds/images/image_dump/diamonds_with_images.csv')
csv_path = Path('/content/drive/MyDrive/למידה עמוקה מטלת גמר/Diamonds/images/image_dump/image_dump_data.csv')
image_dir = Path('/content/drive/MyDrive/למידה עמוקה מטלת גמר/Diamonds/images/image_dump/')
filepaths = pd.Series(list(image_dir.glob(r'**/*.jpg')), name='Filepath').astype(str)
raw = pd.read_csv(csv_path)
data = pd.DataFrame(raw)
prices = pd.Series()
image_name= pd.Series(filepaths.apply(lambda x: os.path.split(x)[1]), name = 'id').astype(str)
    # if row[0]=='1771083':
#         # print('hello')
f = open('/content/drive/MyDrive/למידה עמוקה מטלת גמר/Diamonds/images/image_dump/diamonds_with_images.csv', 'w')
image_name = image_name.to_frame()



# create the csv writer
writer = csv.writer(f)
header = ['id','price']
# write a row to the csv file
writer.writerow(header)
j=0
for i,id in enumerate(data['Id']):  
  if id in image_name.values:
    price_i = data.iat[i,1]
    writer.writerow([filepaths.values[j],price_i])
    j += 1
  else:
    continue
    #writer.writerow(price_i)
f.close()

images = pd.read_csv(condensed, squeeze=True)
images = images.sample(frac=1.0 , random_state=1).reset_index(drop=True).astype('str')
image_df = images.sample(1200, random_state=1).reset_index(drop=True)


train_df, test_df = train_test_split(image_df, train_size = 0.7, shuffle=True, random_state=1)

#loading images

train_generator = tf.keras.preprocessing.image.ImageDataGenerator(
    rescale = 1./255,
    validation_split = 0.2
)

test_generator = tf.keras.preprocessing.image.ImageDataGenerator(
    rescale = 1./255
)

train_images = train_generator.flow_from_dataframe(
    dataframe = train_df,
    x_col = 'id',
    y_col = 'price',
    target_size=(300,300),
    color_mode = 'rgb',
    class_node = 'raw',
    batch_size = 32,
    shuffle=True,
    seed = 42,
    subset = 'training'
)

val_images = train_generator.flow_from_dataframe(
    dataframe = train_df,
    x_col = 'id',
    y_col = 'price',
    target_size=(300,300),
    color_mode = 'rgb',
    class_node = 'raw',
    batch_size = 32,
    shuffle=True,
    seed = 42,
    subset = 'validation'
)

test_images = test_generator.flow_from_dataframe(
    dataframe = train_df,
    x_col = 'id',
    y_col = 'price',
    target_size=(300,300),
    color_mode = 'rgb',
    class_node = 'raw',
    batch_size = 32,
    shuffle=False
)





###training

inputs = tf.keras.Input(shape=(300, 300, 3))
# looks at regions of images
#extracting features from features
x = tf.keras.layers.Conv2D(filters=16, kernel_size=(2,2), activation ='relu')(inputs)
x = tf.keras.layers.MaxPool2D()(x)
x = tf.keras.layers.Conv2D(filters=32, kernel_size=(2,2), activation ='relu')(inputs)
x = tf.keras.layers.MaxPool2D()(x)

x = tf.keras.layers.Flatten()(x)
#x = tf.keras.layers.GlobalAveragePooling2D()(x)
x = tf.keras.layers.Dense(64, activation='relu')(x)
x = tf.keras.layers.Dense(64, activation='relu')(x)
outputs = tf.keras.layers.Dense(1, activation = 'linear')(x)

model = tf.keras.Model(inputs=inputs, outputs=outputs)

model.compile(
    optimizer = 'adam',
    loss='mse'
)
history = model.fit(
    train_images,
    validation_data = val_images,
    epochs = 20,
    callbacks=[
               tf.keras.callbacks.EarlyStopping(
                   monitor='val_loss',
                   patience=5,
                   restore_best_weights=True
               )
    ]
)

predicted_price = np.squeeze(model.predict(test_images))
true_price = test_images.labels

rmse = np.sqrt(model.evaluate(test_images, verbose =0))
print('Tesst RMSE:{:.5f}'.format(rmse))

#difference between base line model to our model
#worse then base line model if negative
r2 = r2_score(true_price, predicted_price)
print('Test R^2 Score: {:.5f}'.format(r2))